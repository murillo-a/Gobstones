// Ejercicio 1
program {
    RemoverObstaculoEnUnVertice()
}

procedure RemoverObstaculoEnUnVertice() {
    /*
        PROPÓSITO: Elimina el obstáculo de la ubicación actual, solo si este se encuentra en una de las
        4 esquinas de la grilla. Entendemos por remover obstáculo: dejar la ubicación vacía de bolitas.

        PRECONDICIONES: La celda no debe estar vacía.
    */
    if (
        // Evalúa si la celda actual está en el borde Norte o el borde Sur
        (puedeMover(Norte) && (not puedeMover(Sur))
        || puedeMover(Sur) && (not puedeMover(Norte)))
        // Evalúa si la celda actual está en el borde Oeste o el borde Este
        && (puedeMover(Oeste) && (not puedeMover(Este))
        || puedeMover(Este) && (not puedeMover(Oeste)))
        )
        {
        RemoverObstaculoSiHay()
        }
}

procedure RemoverObstaculoSiHay() {
    /*
        PROPÓSITO: Elimina el obstáculo de la ubicación actual, solo si este se encuentra en una de las
        4 esquinas de la grilla. Entendemos por remover obstáculo: dejar la ubicación vacía de bolitas.

        PRECONDICIONES: La celda no debe estar vacía.
    */
    if (hayBolitas(Azul)) {
        repeat(nroBolitas(Azul)){
            Sacar(Azul)
        }
    if (hayBolitas(Negro)) {
        repeat(nroBolitas(Negro)){
            Sacar(Negro)
        }
    }
}
}

// Ejercicio 2
//OPTIMIZE: create procedures
procedure RodearFichaAqui() {
    /*
        PROPÓSITO: Rodea la ficha de la ubicación actual con obstáculos.
        PRECONDICIONES: Todas las ubicaciones lindantes, hacia las 4 direcciones, y sus respectivas direcciones diagonales,
        deben estar vacías.
    */
    if (puedeMover(Norte)) {
        Mover(Norte)
        PonerObstaculo()
        Mover(Sur)
    }
    if (puedeMover(Este)) {
        Mover(Este)
        PonerObstaculo()
        Mover(Oeste)
    }
    if (puedeMover(Sur)) {
        Mover(Sur)
        PonerObstaculo()
        Mover(Norte)
    }
        if (puedeMover(Oeste)) {
        Mover(Oeste)
        PonerObstaculo()
        Mover(Este)
    }
}

procedure PonerObstaculo() {
    Poner_DeColor_(2, Negro)
}

procedure Poner_DeColor_(cantidadAPoner, color) {
    repeat(cantidadAPoner) {
        Poner(color)
    }
}